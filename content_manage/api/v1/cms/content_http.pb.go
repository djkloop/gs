// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v5.28.3
// source: api/v1/cms/content.proto

package cms

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationContentCreateContent = "/api.v1.cms.Content/CreateContent"
const OperationContentUpdateContent = "/api.v1.cms.Content/UpdateContent"

type ContentHTTPServer interface {
	CreateContent(context.Context, *CreateContentRequest) (*CreateContentReply, error)
	UpdateContent(context.Context, *UpdateContentRequest) (*UpdateContentReply, error)
}

func RegisterContentHTTPServer(s *http.Server, srv ContentHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/cms/content/create", _Content_CreateContent0_HTTP_Handler(srv))
	r.POST("/v1/cms/content/update", _Content_UpdateContent0_HTTP_Handler(srv))
}

func _Content_CreateContent0_HTTP_Handler(srv ContentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateContentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContentCreateContent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateContent(ctx, req.(*CreateContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateContentReply)
		return ctx.Result(200, reply)
	}
}

func _Content_UpdateContent0_HTTP_Handler(srv ContentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateContentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContentUpdateContent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateContent(ctx, req.(*UpdateContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateContentReply)
		return ctx.Result(200, reply)
	}
}

type ContentHTTPClient interface {
	CreateContent(ctx context.Context, req *CreateContentRequest, opts ...http.CallOption) (rsp *CreateContentReply, err error)
	UpdateContent(ctx context.Context, req *UpdateContentRequest, opts ...http.CallOption) (rsp *UpdateContentReply, err error)
}

type ContentHTTPClientImpl struct {
	cc *http.Client
}

func NewContentHTTPClient(client *http.Client) ContentHTTPClient {
	return &ContentHTTPClientImpl{client}
}

func (c *ContentHTTPClientImpl) CreateContent(ctx context.Context, in *CreateContentRequest, opts ...http.CallOption) (*CreateContentReply, error) {
	var out CreateContentReply
	pattern := "/v1/cms/content/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContentCreateContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContentHTTPClientImpl) UpdateContent(ctx context.Context, in *UpdateContentRequest, opts ...http.CallOption) (*UpdateContentReply, error) {
	var out UpdateContentReply
	pattern := "/v1/cms/content/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContentUpdateContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
